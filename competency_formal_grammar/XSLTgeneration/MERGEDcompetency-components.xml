<?xml version="1.0" encoding="UTF-8"?>
<xml>
    <!--<domains>
        <scopes>
            <string>Whole Numbers <insert idref="#sub_scope"/></string> = class="wholenum"
            <string>Integers</string> = class="int"
            <string>Unit Fractions</string> = class="unit"
            <string>Rational Numbers</string> = class="rational"
            <string>Real Numbers</string> = class="real"
            <string>Imaginary Numbers</string> = class="imag"
            <string>Complex Numbers</string> = class="complex"
            <string>Vectors</string> = class="vector"
            <string>Matrices</string> = class="matrix"
            <string>Infinite Numbers</string> = class="infinite"
            <string>Random Numbers</string>
            <string>Expected Values</string> = class="expect"
            <string>Probabilities</string>
            <string>The Plane</string> = class="plane"
            <string>Space</string> = class="space"
            <string>Algebraic Expressions</string> = class="algexp"
            <string>Numerical Expressions</string> = class="numexp"
        </scopes>

        <sub_scope xml:id="sub_scope">
            <string>0</string>
            <string>1</string>
            <string>to 2</string>
            <string>to 3</string>
            <string>to 4</string>
            <string>to 5</string>
            <string>within 10</string>
            <string>within 20</string>
            <string>within 100</string>
            <string>within 120</string>
            <string>within 1000</string>
        </sub_scope>
    </domains>-->


    <!-- Consideration: creating separate subscope classes to be filtered in XSLT -->


    <!-- dont you heckin dare snakelcase - un-snakelcase the things-->


    <compParts>
        <processGroup>
            <process>
                <!-- SUBCLASS attribute values should be filtered according to the component this string will go with,
            the rest of the strings will not have the subclass attribute value-->
                <formalProcess>
                    <string class="wholenum int rational algexp numexp complex imag plane expect real unit matrix infinite"
                        subclass="notation" specObj="true">Read</string>
                    <string class="wholenum int rational real unit" subclass="noNot" specObj="true"
                        >Recite</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        subclass="notation" specObj="true">Write</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        subclass="noNot" specObj="true">Represent</string>
                    <string class="wholenum space plane unit vector" subclass="noNot" specObj="true">Represent,
                        with images,</string>
                    <string class="wholenum" subclass="noNot" specObj="true">Represent, with
                        sounds,</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane real unit vector matrix infinite"
                        subclass="noNot" specObj="true">Represent, with activities,</string>
                    <string class="wholenum" subclass="noNot" specObj="true">Represent, with
                        specimens,</string>
                    <string class="wholenum" subclass="noNot" specObj="true">Represent, with body
                        parts,</string>
                    <string class="wholenum int rational complex imag unit infinite" subclass="noNot"
                        specObj="true">Represent, with words,</string>
                    <string class="wholenum algexp numexp unit vector matrix infinite" subclass="noNot" specObj="true"
                        >Represent, with symbols,</string>
                    <string class="wholenum space plane unit" subclass="noNot" specObj="true">Represent,
                        with drawings,</string>
                    <string class="wholenum algexp numexp space plane expect vector matrix" subclass="noNot"
                        specObj="true">Represent, with graphs,</string>
                    <string class="wholenum int rational expect real" subclass="noNot" specObj="true">Randomly
                        sample</string>
                </formalProcess>
                <!-- NO notations with knowledge process sentences -->
                <knowledge>
                    <knowledgeProcess>
                        <string class="wholenum int rational complex imag space real unit infinite" specObj="true"
                            mathop="true">Remember</string>
                        <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                            specObj="true" mathop="true">Evaluate</string>
                        <string class="wholenum int rational complex imag space plane real unit infinite"
                            specObj="true">Create</string>
                        <string class="wholenum int rational algexp numexp complex imag space expect real unit matrix infinite"
                            specObj="true" mathop="true">Understand</string>
                        <string class="wholenum int rational algexp numexp complex imag space expect real unit vector matrix infinite"
                            specObj="true" mathop="true">Apply</string>
                        <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                            specObj="true" mathop="true">Analyze</string>
                        <knowledgeSubprocess>
                            <string class="wholenum">by Putting Together</string>
                            <string class="wholenum">by Adding To</string>
                            <string class="wholenum">by Taking Apart</string>
                            <string class="wholenum">by Taking From</string>
                        </knowledgeSubprocess>
                    </knowledgeProcess>
                </knowledge>
            </process>
            <!--BRANCHES HERE 
                2 options: knowledge OR formal with processPred or specific_object => end of chain
                knowledge OR formal -> mathopObject (quant) -> notation?-->

        </processGroup>

        <!-- FURTHER DEFINE FILTERING RULES BASED ON SUBSCOPE ID VALUES -->


        <processBranch>
            <processPred>
                <string class="algexp numexp space unit">Volumes</string>
                <string class="wholenum int rational numexp complex imag plane real unit matrix infinite">Numerical
                    Expressions</string>
                <string class="wholenum int rational numexp complex imag plane real unit matrix infinite">Numerical
                    Equations</string>
                <string class="wholenum int rational complex imag space real unit vector">Properties of
                    Objects</string>
                <string class="wholenum algexp numexp complex imag expect real vector matrix">Properties of
                    Operations</string>
                <string class="wholenum int rational algexp numexp space expect real matrix">Patterns</string>
                <string class="wholenum int rational complex imag real unit">Common Factors</string>
                <string class="wholenum int rational complex imag real unit matrix">Multiples</string>
                <string class="wholenum int rational complex imag real matrix">Common Multiples</string>
                <string class="wholenum rational int real infinite">Place Values</string>
                <string class="wholenum space expect unit">Attributes</string>
                <string class="wholenum int rational unit">Standard Units</string>
                <string class="wholenum int rational unit">SI Units</string>
                <string class="wholenum algexp numexp space plane">Areas</string>
                <string class="wholenum algexp numexp space plane matrix">Perimeters</string>
                <string class="wholenum int rational algexp numexp space plane expect real matrix infinite">Data</string>
                <string class="space plane expect unit vector matrix">Shapes</string>
                <string class="algexp numexp space plane unit">Surface Areas</string>
                <string class="wholenum rational int algexp numexp space plane expect unit vector">Realia</string>
                <string class="wholenum rational int algexp numexp space plane expect unit vector matrix infinite">Models</string>
                <string class="complex imag space plane vector matrix">Congruence</string>
                <string class="complex imag space plane vector matrix">Similarity</string>
                <string class="wholenum int rational expect matrix">Ratios</string>
                <string class="rational int algexp expect unit matrix">Proportions</string>
                <string class="wholenum int rational numexp complex imag expect real unit vector infinite">Numerical
                    Inequalities</string>
                <string class="int rational algexp complex imag space expect vector matrix infinite">Algebraic Equations</string>
                <string class="int rational algexp complex imag expect unit vector infinite">Algebraic Inequalities</string>
                <string class="wholenum int rational algexp numexp space plane real unit vector infinite">Lines</string>
                <string class="int rational algexp numexp space plane real unit matrix infinite">Linear Equations</string>
                <string class="int rational algexp complex imag expect matrix">Simultaneous Equations</string>
                <string class="algexp numexp complex imag expect infinite">Statistical Variability</string>
                <string class="algexp numexp complex imag expect unit">Distributions</string>
                <string class="algexp numexp unit matrix">Populations</string>
                <string class="algexp numexp complex imag expect infinite">Probability Models</string>
                <string class="algexp complex imag expect">Bivariate Data</string>
                <string class="space expect real rational int unit matrix">Sets</string>
                <string class="complex imag space expect real matrix">Elements</string>
                <string class="algexp complex imag space expect unit infinite">Experiments</string>
                <string class="wholenum complex imag space plane expect real unit infinite">Observations</string>
                <string class="algexp complex imag space plane expect real vector infinite">Dependent Variables</string>
                <string class="algexp complex imag space plane expect real vector infinite">Independent Variables</string>
                <string class="wholenum int rational algexp numexp complex imag space plane real unit vector matrix infinite"
                    >Sums</string>
                <string class="wholenum int rational algexp numexp complex imag space plane real unit vector matrix infinite"
                    >Differences</string>
                <string class="wholenum int rational algexp numexp complex imag real vector matrix infinite">Products</string>
                <string class="wholenum int rational algexp numexp complex imag real vector matrix infinite">Quotients</string>
                <string class="wholenum int rational algexp numexp complex imag real unit vector matrix infinite">Remainders</string>
                <string class="wholenum algexp numexp space plane expect unit matrix">Groups</string>
                <string class="wholenum algexp numexp space plane unit vector matrix">Length</string>
                <string class="wholenum algexp numexp space plane unit vector matrix">Width</string>
                <string class="wholenum algexp numexp space plane unit vector matrix">Depth or Height</string>
                <string class="wholenum space plane infinite">Qualitative Attributes</string>
                <string class="space plane vector matrix">Plane Figures</string>
                <string class="space plane vector matrix">Objects in Space</string>
                <string class="int rational algexp complex imag expect real unit">Samples</string>
                <string class="int rational algexp expect">Random Samples</string>
                <string class="space">Prisms and Cylinders</string>
                <string class="space">Spheres</string>
                <string class="space">Cones</string>
                <string class="wholenum space plane expect unit real infinite">Quantitative Stories</string>
            </processPred>



            <!-- ignore further specific object generations - take specific object out of the filtering/generation (use bulk/unfiltered gen) -->

            <specificObject>
                <string specObj="true">the Pythagorean Theorem</string>
                <string specObj="true">the Standard Algorithm for Addition</string>
                <string specObj="true">the Standard Algorithm for Subtraction</string>
                <string specObj="true">the Standard Algorithm for Multiplication</string>
                <string specObj="true">the Standard Algorithm for Division</string>
                <string specObj="true">the European Algorithm for Subtraction</string>
                <string specObj="true">the Lattice Algorithm for Multiplication</string>
                <string specObj="true">Common Factors</string>
                <string specObj="true">the Distributive Property</string>
                <string specObj="true">the Commutative Property</string>
                <string specObj="true">the Associative Property</string>
            </specificObject>

            <mathOPobject>
                <mathOperation>
                    <string class="wholenum complex imag real unit">Naming</string>
                    <string class="wholenum unit">Counting</string>
                    <string class="int rational complex imag real unit infinite">Sequencing</string>
                    <string class="wholenum int rational complex imag real unit infinite">Ordering</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        >Adding</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        >Subtracting</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        >Multiplying</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real unit vector matrix infinite"
                        >Dividing</string>
                    <string class="wholenum int rational algexp numexp complex imag expect real unit vector matrix infinite"
                        >Negating</string>
                    <string class="wholenum int rational algexp numexp complex imag space plane expect real vector matrix infinite"
                        >Exponentiating</string>
                    <string class="wholenum int rational algexp numexp complex imag expect real unit matrix"
                        >Grouping</string>
                    <!-- Operations -->
                    <!--<string>Order Operations</string>-->
                </mathOperation>

                <quant>
                    <string class="wholenum int rational algexp numexp complex imag space plane real unit matrix infinite"
                        >Numbers</string>
                    <string class="wholenum int rational algexp numexp complex imag expect real unit vector matrix infinite">Terms</string>
                    <string class="wholenum int rational algexp complex imag real unit vector matrix infinite">Factors</string>
                    <string class="algexp numexp space plane vector matrix">Angles</string>

                    <string class="int rational algexp complex imag space plane expect unit vector matrix infinite">Algebraic
                        Expressions</string>
                    <string class="int rational algexp complex imag space plane expect unit vector matrix infinite">Variables</string>
                    <string class="int rational algexp numexp complex imag space plane expect real matrix infinite"
                        >Functions</string>
                    <string class="algexp numexp expect infinite">Chance Processes</string>
                    <string class="rational int numexp expect real matrix">Arrays</string>
                </quant>
            </mathOPobject>

        </processBranch>



        <!-- specific object and notation object will never occur in the same sentence output -->

        <notationObject>
            <string class="wholenum rational real">in Fractional Notation</string>
            <string class="wholenum rational real infinite">in Decimal Notation</string>
            <string class="wholenum rational int real">in Proportional Notation</string>
            <string class="wholenum">in Addition Notation</string>
            <string class="wholenum">in Subtraction Notation</string>
            <string class="wholenum">in Multiplication Notation</string>
            <string class="wholenum">in Division Notation</string>
            <string class="wholenum rational int real infinite">in Radical Notation</string>
            <string class="wholenum rational int real infinite">in Exponential Notation</string>
            <string class="wholenum rational int real infinite">in Scientific Notation</string>
            <string class="wholenum rational int">in Base Ten</string>
        </notationObject>


        <subScope>
            <string class="wholenum" scopeClass="sing" id="0" extends="null">0</string>
            <!-- (remove "Whole Numbers") => involving The Number 0? -->
            <string class="wholenum" scopeClass="sing" id="1" extends="null">1</string>
            <!-- (remove "Whole Numbers") => involving The Number One? -->
            <string class="wholenum" scopeClass="to" id="2" extends="1">to 2</string>
            <string class="wholenum" scopeClass="to" id="3" extends="2">to 3</string>
            <string class="wholenum" scopeClass="to" id="4" extends="3">to 4</string>
            <string class="wholenum" scopeClass="to" id="5" extends="4">to 5</string>
            <string class="wholenum" scopeClass="within" id="10" extends="5">within 10</string>
            <string class="wholenum" scopeClass="within" id="20" extends="10">within 20</string>
            <string class="wholenum" scopeClass="within" id="100" extends="20">within 100</string>
            <string class="wholenum" scopeClass="within" id="120" extends="100">within 120</string>
            <string class="wholenum" scopeClass="within" id="1000" extends="120">within
                1000</string>
        </subScope>



        <mathPractComp>
            <string MPC="true">Make Sense of Problems</string>
            <string MPC="true">Persevere in Solving Problems</string>
            <string MPC="true">Reason Abstractly</string>
            <string MPC="true">Reason Quantitatively</string>
            <string MPC="true">Construct Viable Arguments</string>
            <string MPC="true">Critique Reasoning</string>
            <string MPC="true">Model Problems</string>
            <string MPC="true">Use Tools Strategically</string>
            <string MPC="true">Attend to Precision</string>
            <string MPC="true">Look for Structure</string>
            <string MPC="true">Make Use of Structure</string>
            <string MPC="true">Look for Regularity in Repeated Reasoning</string>
            <string MPC="true">Express Regularity in Repeated Reasoning</string>
        </mathPractComp>


    </compParts>
</xml>
